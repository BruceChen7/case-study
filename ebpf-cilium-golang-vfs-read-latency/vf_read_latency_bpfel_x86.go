// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadVf_read_latency returns the embedded CollectionSpec for vf_read_latency.
func loadVf_read_latency() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Vf_read_latencyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load vf_read_latency: %w", err)
	}

	return spec, err
}

// loadVf_read_latencyObjects loads vf_read_latency and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*vf_read_latencyObjects
//	*vf_read_latencyPrograms
//	*vf_read_latencyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadVf_read_latencyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadVf_read_latency()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// vf_read_latencySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vf_read_latencySpecs struct {
	vf_read_latencyProgramSpecs
	vf_read_latencyMapSpecs
}

// vf_read_latencySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vf_read_latencyProgramSpecs struct {
	DoEntry  *ebpf.ProgramSpec `ebpf:"do_entry"`
	DoReturn *ebpf.ProgramSpec `ebpf:"do_return"`
}

// vf_read_latencyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vf_read_latencyMapSpecs struct {
	ReadEvents *ebpf.MapSpec `ebpf:"read_events"`
}

// vf_read_latencyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadVf_read_latencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type vf_read_latencyObjects struct {
	vf_read_latencyPrograms
	vf_read_latencyMaps
}

func (o *vf_read_latencyObjects) Close() error {
	return _Vf_read_latencyClose(
		&o.vf_read_latencyPrograms,
		&o.vf_read_latencyMaps,
	)
}

// vf_read_latencyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadVf_read_latencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type vf_read_latencyMaps struct {
	ReadEvents *ebpf.Map `ebpf:"read_events"`
}

func (m *vf_read_latencyMaps) Close() error {
	return _Vf_read_latencyClose(
		m.ReadEvents,
	)
}

// vf_read_latencyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadVf_read_latencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type vf_read_latencyPrograms struct {
	DoEntry  *ebpf.Program `ebpf:"do_entry"`
	DoReturn *ebpf.Program `ebpf:"do_return"`
}

func (p *vf_read_latencyPrograms) Close() error {
	return _Vf_read_latencyClose(
		p.DoEntry,
		p.DoReturn,
	)
}

func _Vf_read_latencyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vf_read_latency_bpfel_x86.o
var _Vf_read_latencyBytes []byte
